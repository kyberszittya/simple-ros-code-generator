/*
 * generated by Xtext 2.21.0
 */
package hu.sze.aut.ros.middleware.statepubsub.formatting2

import com.google.inject.Inject
import hu.sze.aut.ros.middleware.statepubsub.services.HybridDslGrammarAccess
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.FuzzyHybridSystem
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.HybridSystem
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class HybridDslFormatter extends AbstractFormatter2 {
	
	@Inject extension HybridDslGrammarAccess

	def dispatch void format(HybridSystem hybridSystem, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (location : hybridSystem.location) {
			location.format
		}
		for (transition : hybridSystem.transition) {
			transition.format
		}
		for (continuousVariable : hybridSystem.variable) {
			continuousVariable.format
		}
		for (activity : hybridSystem.activity) {
			activity.format
		}
		for (discreteEvent : hybridSystem.event) {
			discreteEvent.format
		}
		for (invariant : hybridSystem.invariant) {
			invariant.format
		}
	}

	def dispatch void format(FuzzyHybridSystem fuzzyHybridSystem, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (location : fuzzyHybridSystem.location) {
			location.format
		}
		for (transition : fuzzyHybridSystem.transition) {
			transition.format
		}
		for (continuousVariable : fuzzyHybridSystem.variable) {
			continuousVariable.format
		}
		for (activity : fuzzyHybridSystem.activity) {
			activity.format
		}
		for (discreteEvent : fuzzyHybridSystem.event) {
			discreteEvent.format
		}
		for (invariant : fuzzyHybridSystem.invariant) {
			invariant.format
		}
		for (ruleSet : fuzzyHybridSystem.ruleset) {
			ruleSet.format
		}
	}
	
	// TODO: implement for 
}
