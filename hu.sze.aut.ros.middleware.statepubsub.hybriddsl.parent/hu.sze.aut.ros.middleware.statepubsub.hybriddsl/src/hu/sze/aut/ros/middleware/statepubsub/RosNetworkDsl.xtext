grammar hu.sze.aut.ros.middleware.statepubsub.RosNetworkDsl with org.eclipse.xtext.common.Terminals

import "http://jkk.sze.hu/statepubsubmodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

MiddleWareNetwork returns Stack:
	{Stack}
	"stack" name=EString
	'{'
		'networktype' (networktype+=NetworkType) (','networktype+=NetworkType)*
		
		filepackage+=FilePackage (filepackage+=FilePackage)*
		(
		'channels'
		'{'
			channels+=Channel
			(channels+=Channel)*
		'}'
		)?		
	'}'
;

FilePackage returns FilePackage:
	{FilePackage}
	'package' name=EString (generateartifact?='generate')?
	'{'
	abstractroselement+= AbstractRosFileElement (abstractroselement+=AbstractRosFileElement)*
	(filter+=FilterDefinition (filter+=FilterDefinition)*)?
	'}'
;

FilterDefinition returns FilterDefinition:
	{FilterDefinition}
	'filter' name=EString
	'{'
	'input' input_field+=SerializedField ('input' input_field+=SerializedField)*
	'output' output_field=SerializedField
	'}'
;

SerializedField returns SerializedField:
	{SerializedField}
	'field'  id=EString topicmessage=[TopicMessage|EString]
;

AbstractRosFileElement returns AbstractRosFileElement:
	AbstractMessageType | Node 
;


AbstractMessageType returns AbstractMsgType:
	TopicMessage | ServiceType 
;



NetworkType returns NetworkType:
	'ROS1'|'ROS2'
;

TopicMessage returns TopicMessage:
	{TopicMessage}
	'messagetype' name=EString
;

ServiceType returns ServiceType:
	{ServiceType}
	'servicetype' name=EString
;

Channel returns Channel:
	Topic | Service
;

Service returns Service:
	{Service}
	'service' name=EString ':' type=[ServiceType|EString]
;

Topic returns Topic:
	{Topic}
	'topic' name=EString ':' type=[TopicMessage|EString]
;

NodeParameter returns NodeParameter:
	DoubleParameter|IntegerParameter| BooleanParameter
;

BooleanParameter returns BooleanParameter:
    {BooleanParameter}
    "bool" name=EString '=' defaultval=EBoolean ('->' targetvar=EString)?
;	
	
IntegerParameter returns IntegerParameter:
	{IntegerParameter}
	"int" name=EString '=' defaultval=EInt '<'minval=EInt','maxval=EInt'>' ('->' targetvar=EString)? 
;
	
DoubleParameter	returns DoubleParameter:
	{DoubleParameter}
	"double" name=EString '=' defaultval=Double '<'minval=Double','maxval=Double'>' ('->' targetvar=EString)?
;

NodeParameterGroup returns NodeParameterGroup:
	{NodeParameterGroup}
	'parametergroup' name=EString ("configobject" config_obj=EString)? ("generate" generate_struct=EBoolean)?
	'{'
	nodeparameter+=NodeParameter
	(nodeparameter+=NodeParameter)*
	'}' 
;


AbstractNodeParameter returns AbstractNodeParameter:
	NodeParameter | NodeParameterGroup
; 

RosRuntimeElement returns RosRuntimeElement:
	Node |  Library
;

Library returns LibraryNode:
	{LibraryNode}
	'librarynode' name=EString 'namespace' namespace=EString ('implements' implements=[Node|EString])?
	'{'
		"language" language+=LanguageType (',' language+=LanguageType)*
		('parameters'
		'{'
		nodeparameters+=AbstractNodeParameter
		(nodeparameters+=AbstractNodeParameter)*
		'}')?
		("stati"
		'{'
		continousstate+=ContinuousState
		'}'
		)?
		// Port definition
		(
			
			port += Port (port += Port)*
			
		)?
	'}'	
;
 
Node returns Node:
	{Node}
	'node' name=EString "namespace" namespace=EString ("implements" implements=[Node|EString])?
	'{'
		"language" language+=LanguageType (',' language+=LanguageType)*
		('parameters'
		'{'
		nodeparameters+=AbstractNodeParameter
		(nodeparameters+=AbstractNodeParameter)*
		'}')?
		("stati"
		'{'
		continousstate+=ContinuousState
		'}'
		)?		
		// Port definition
		(
			port += Port (port += Port)*
		)?
		(
			filterconnection += FilterConnection (filterconnection+=FilterConnection)*
		)?
	'}'
;

FilterConnection returns FilterConnection:
	{FilterConnection}
	'filter' name=EString ":" usedfilter=[FilterDefinition|EString] '['input+=[InternalNode|EString] (',' input+=[InternalNode|EString])* ']' '->' output=[InternalNode|EString]
;

ContinuousState returns ContinousState:
	{ContinousState}
	'continuousstate' name=EString
;

LanguageType returns LanguageType:
	'Python' | 'Cpp' 
;

Port returns Port:
	InputPort | OutputPort
;

InputPort returns InputPort:
	{InputPort}
	'port' name=EString '<-' channel=[Channel|EString] ('estimated_freq' estimated_freq=EInt 'sample_tolerance' sample_tolerance=Double (debug?='debug')?)? ('syncstate' synchronizesState=[ContinousState|EString])?
	
;

OutputPort returns OutputPort:
	{OutputPort}
	'port' name=EString '->' channel=[Channel|EString] ('estimated_freq' estimated_freq=EInt (debug?='debug')?)
	
;

EBoolean returns ecore::EBoolean: 
	'true' | 'false'	
;


EInt returns ecore::EInt:
	INT
;

Double returns ecore::EDouble:
	INT '.' INT
;

EString returns ecore::EString:
	STRING | ID;